diff --speed-large-files --no-dereference --minimal -Naur u-boot-2025.01/arch/arm/mach-sunxi/dram_sun50i_h616.c u-boot-2025.01/arch/arm/mach-sunxi/dram_sun50i_h616.c
--- u-boot-2025.01/arch/arm/mach-sunxi/dram_sun50i_h616.c	2025-03-04 11:49:34.948275012 +0100
+++ u-boot-2025.01/arch/arm/mach-sunxi/dram_sun50i_h616.c	2025-03-04 10:24:35.961591531 +0100
@@ -1,3 +1,6 @@
+
+#define DEBUG
+
 // SPDX-License-Identifier: GPL-2.0+
 /*
  * sun50i H616 platform dram controller driver
@@ -1409,13 +1412,16 @@
 	 * if controller was already initialized and holds any data
 	 * which is important for restoring system.
 	 */
+	debug("DRAM:Store cfg\n");
 	memcpy(buffer, (u32*)CFG_SYS_SDRAM_BASE, sizeof(buffer));
 
+	debug("DRAM:1st writing pattern\n");
 	mctl_write_pattern();
 
 	shift = config->bus_full_width + 1;
 
 	/* detect column address bits */
+	debug("DRAM:detecting column address bits\n");
 	for (config->cols = 8; config->cols < 11; config->cols++) {
 		if (mctl_check_pattern(1ULL << (config->cols + shift)))
 			break;
@@ -1423,18 +1429,24 @@
 	debug("detected %u columns\n", config->cols);
 
 	/* restore data */
+	debug("DRAM:restore cfg\n");
 	memcpy((u32*)CFG_SYS_SDRAM_BASE, buffer, sizeof(buffer));
 
 	/* reconfigure to make sure that all active rows are accessible */
+
 	config->rows = 17;
+	debug("DRAM:reconfigure for all active rows\n");
 	mctl_core_init(para, config);
 
 	/* store data again as it might be moved */
+	debug("DRAM:store cfg\n");
 	memcpy(buffer, (u32*)CFG_SYS_SDRAM_BASE, sizeof(buffer));
 
+	debug("DRAM:2nd writing pattern\n");
 	mctl_write_pattern();
 
 	/* detect row address bits */
+	debug("DRAM:detecting row address bits\n");
 	shift = config->bus_full_width + 4 + config->cols;
 	for (config->rows = 13; config->rows < 16; config->rows++) {
 		if (mctl_check_pattern(1ULL << (config->rows + shift)))
@@ -1443,7 +1455,10 @@
 	debug("detected %u rows\n", config->rows);
 
 	/* restore data again */
+	debug("DRAM:restoring cfg\n");
 	memcpy((u32*)CFG_SYS_SDRAM_BASE, buffer, sizeof(buffer));
+
+	debug("DRAM:end of auto detect dram size\n");
 }
 
 static unsigned long mctl_calc_size(const struct dram_config *config)
