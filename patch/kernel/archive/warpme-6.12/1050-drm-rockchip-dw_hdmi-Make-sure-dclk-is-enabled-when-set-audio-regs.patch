From 9d4256ccaf8119c4b9dd8d51375066441f2f6d2d Mon Sep 17 00:00:00 2001
From: Algea Cao <algea.cao@rock-chips.com>
Date: Thu, 24 Feb 2022 11:05:56 +0800
Subject: [PATCH 83/84] drm/rockchip: dw_hdmi: Make sure dclk is enabled when
 set audio registers

Change-Id: Idb62c2c9ea0d75d7090ec3e35c7742b0d42b3e43
Signed-off-by: Algea Cao <algea.cao@rock-chips.com>
Signed-off-by: Sugar Zhang <sugar.zhang@rock-chips.com>
Signed-off-by: Detlev Casanova <detlev.casanova@collabora.com>

Gbp-Pq: Topic hdmi-audio
Gbp-Pq: Name 0166-drm-rockchip-dw_hdmi-Make-sure-dclk-is-enabled-when-.patch
---
 drivers/gpu/drm/bridge/synopsys/dw-hdmi-qp.c  | 73 +++++++++++++------
 .../gpu/drm/rockchip/dw_hdmi_qp-rockchip.c    | 50 +++++++++++++
 include/drm/bridge/dw_hdmi_qp.h               |  2 +
 3 files changed, 104 insertions(+), 21 deletions(-)

diff --git a/drivers/gpu/drm/bridge/synopsys/dw-hdmi-qp.c b/drivers/gpu/drm/bridge/synopsys/dw-hdmi-qp.c
index 72d8d83d3..7db5725dd 100644
--- a/drivers/gpu/drm/bridge/synopsys/dw-hdmi-qp.c
+++ b/drivers/gpu/drm/bridge/synopsys/dw-hdmi-qp.c
@@ -139,7 +139,6 @@ struct dw_hdmi_qp {
 	struct drm_connector *curr_conn;
 	unsigned long long pix_clock;
 
-	spinlock_t audio_lock;
 	unsigned int sample_non_pcm;
 	unsigned int sample_width;
 	unsigned int channels;
@@ -149,6 +148,8 @@ struct dw_hdmi_qp {
 	unsigned int audio_cts;
 	unsigned int audio_n;
 	bool audio_enable;
+	bool dclk_en;
+	int (*dclk_set)(void *data, bool enable);
 	void (*enable_audio)(struct dw_hdmi_qp *hdmi);
 	void (*disable_audio)(struct dw_hdmi_qp *hdmi);
 
@@ -373,6 +374,12 @@ EXPORT_SYMBOL_GPL(dw_hdmi_qp_set_audio_interface);
 void dw_hdmi_qp_set_channel_status(struct dw_hdmi_qp *hdmi,
 				   u8 *channel_status, bool ref2stream)
 {
+	mutex_lock(&hdmi->audio_mutex);
+	if (!hdmi->dclk_en) {
+		mutex_unlock(&hdmi->audio_mutex);
+		return;
+	}
+
 	/*
 	 * AUDPKT_CHSTATUS_OVR0: { RSV, RSV, CS1, CS0 }
 	 * AUDPKT_CHSTATUS_OVR1: { CS6, CS5, CS4, CS3 }
@@ -414,6 +421,8 @@ void dw_hdmi_qp_set_channel_status(struct dw_hdmi_qp *hdmi,
 		dw_hdmi_qp_mod(hdmi, AUDPKT_PBIT_FORCE_EN | AUDPKT_CHSTATUS_OVR_EN,
 			  AUDPKT_PBIT_FORCE_EN_MASK | AUDPKT_CHSTATUS_OVR_EN_MASK,
 			  AUDPKT_CONTROL0);
+
+	mutex_unlock(&hdmi->audio_mutex);
 }
 EXPORT_SYMBOL_GPL(dw_hdmi_qp_set_channel_status);
 
@@ -424,11 +433,9 @@ static void hdmi_set_clk_regenerator(struct dw_hdmi_qp *hdmi,
 
 	n = hdmi_find_n(hdmi, pixel_clk, sample_rate);
 
-	spin_lock_irq(&hdmi->audio_lock);
 	hdmi->audio_n = n;
 	hdmi->audio_cts = cts;
 	hdmi_set_cts_n(hdmi, cts, hdmi->audio_enable ? n : 0);
-	spin_unlock_irq(&hdmi->audio_lock);
 }
 
 void dw_hdmi_qp_set_channel_count(struct dw_hdmi_qp *hdmi, unsigned int cnt)
@@ -485,6 +492,12 @@ void dw_hdmi_qp_set_audio_infoframe(struct dw_hdmi_qp *hdmi,
 		return;
 	}
 
+	mutex_lock(&hdmi->audio_mutex);
+	if (!hdmi->dclk_en) {
+		mutex_unlock(&hdmi->audio_mutex);
+		return;
+	}
+
 	/*
 	 * AUDI_CONTENTS0: { RSV, HB2, HB1, RSV }
 	 * AUDI_CONTENTS1: { PB3, PB2, PB1, PB0 }
@@ -550,27 +563,27 @@ static void dw_hdmi_i2s_audio_disable(struct dw_hdmi_qp *hdmi)
 
 void dw_hdmi_qp_audio_enable(struct dw_hdmi_qp *hdmi)
 {
-	unsigned long flags;
-
-	spin_lock_irqsave(&hdmi->audio_lock, flags);
-	hdmi->audio_enable = true;
-	if (hdmi->enable_audio)
-		hdmi->enable_audio(hdmi);
-
-	hdmi_set_clk_regenerator(hdmi, hdmi->pix_clock, hdmi->sample_rate);
-	spin_unlock_irqrestore(&hdmi->audio_lock, flags);
+	mutex_lock(&hdmi->audio_mutex);
+	if (hdmi->dclk_en) {
+		hdmi->audio_enable = true;
+		if (hdmi->enable_audio)
+			hdmi->enable_audio(hdmi);
+		hdmi_set_clk_regenerator(hdmi, hdmi->pix_clock,
+					 hdmi->sample_rate);
+	}
+	mutex_unlock(&hdmi->audio_mutex);
 }
 EXPORT_SYMBOL_GPL(dw_hdmi_qp_audio_enable);
 
 void dw_hdmi_qp_audio_disable(struct dw_hdmi_qp *hdmi)
 {
-	unsigned long flags;
-
-	spin_lock_irqsave(&hdmi->audio_lock, flags);
-	hdmi->audio_enable = false;
-	if (hdmi->disable_audio)
-		hdmi->disable_audio(hdmi);
-	spin_unlock_irqrestore(&hdmi->audio_lock, flags);
+	mutex_lock(&hdmi->audio_mutex);
+	if (hdmi->dclk_en) {
+		hdmi->audio_enable = false;
+		if (hdmi->disable_audio)
+			hdmi->disable_audio(hdmi);
+	}
+	mutex_unlock(&hdmi->audio_mutex);
 }
 EXPORT_SYMBOL_GPL(dw_hdmi_qp_audio_disable);
 
@@ -1223,6 +1236,7 @@ static void dw_hdmi_qp_bridge_atomic_enable(struct drm_bridge *bridge,
 	struct drm_atomic_state *state = old_state->base.state;
 	struct drm_connector *connector;
 	struct drm_connector_state *conn_state;
+	void* data = hdmi->phy.data;
 
 	connector = drm_atomic_get_new_connector_for_encoder(state,
 							     bridge->encoder);
@@ -1236,15 +1250,32 @@ static void dw_hdmi_qp_bridge_atomic_enable(struct drm_bridge *bridge,
 	dw_hdmi_qp_setup(hdmi, connector);
 
 	drm_atomic_helper_connector_hdmi_update_infoframes(connector, state);
+
+	if (!hdmi->dclk_en) {
+		mutex_lock(&hdmi->audio_mutex);
+		if (hdmi->dclk_set)
+			hdmi->dclk_set(data, true);
+		hdmi->dclk_en = true;
+		mutex_unlock(&hdmi->audio_mutex);
+	}
+
 	dw_hdmi_qp_init_audio_infoframe(hdmi);
 	dw_hdmi_qp_audio_enable(hdmi);
-	hdmi_clk_regenerator_update_pixel_clock(hdmi);
 }
 
 static void dw_hdmi_qp_bridge_atomic_disable(struct drm_bridge *bridge,
 					     struct drm_bridge_state *old_state)
 {
 	struct dw_hdmi_qp *hdmi = bridge->driver_private;
+	void* data = hdmi->phy.data;
+
+	if (hdmi->dclk_en) {
+		mutex_lock(&hdmi->audio_mutex);
+		if (hdmi->dclk_set)
+			hdmi->dclk_set(data, false);
+		hdmi->dclk_en = false;
+		mutex_unlock(&hdmi->audio_mutex);
+	}
 
 	hdmi->curr_conn = NULL;
 	hdmi->phy.ops->disable(hdmi, hdmi->phy.data);
@@ -1421,9 +1452,9 @@ struct dw_hdmi_qp *dw_hdmi_qp_bind(struct platform_device *pdev,
 
 	hdmi->dev = dev;
 	hdmi->sample_rate = 48000;
+	hdmi->dclk_set = plat_data->dclk_set;
 
 	mutex_init(&hdmi->audio_mutex);
-	spin_lock_init(&hdmi->audio_lock);
 
 	regs = devm_platform_ioremap_resource(pdev, 0);
 	if (IS_ERR(regs))
diff --git a/drivers/gpu/drm/rockchip/dw_hdmi_qp-rockchip.c b/drivers/gpu/drm/rockchip/dw_hdmi_qp-rockchip.c
index 679cd9a46..d50121fd6 100644
--- a/drivers/gpu/drm/rockchip/dw_hdmi_qp-rockchip.c
+++ b/drivers/gpu/drm/rockchip/dw_hdmi_qp-rockchip.c
@@ -258,6 +258,55 @@ static void dw_hdmi_qp_rk3588_hpd_work(struct work_struct *work)
 	}
 }
 
+static int dw_hdmi_dclk_set_id(void *data, bool enable, int vp_id)
+{
+	struct rockchip_hdmi_qp *hdmi = (struct rockchip_hdmi_qp *)data;
+	char clk_name[16];
+	struct clk *dclk;
+	int ret;
+
+	snprintf(clk_name, sizeof(clk_name), "dclk_vp%d", vp_id);
+
+	dclk = devm_clk_get_optional(hdmi->dev, clk_name);
+	if (IS_ERR(dclk)) {
+		DRM_DEV_ERROR(hdmi->dev, "failed to get %s\n", clk_name);
+		return PTR_ERR(dclk);
+	} else if (!dclk) {
+		return -ENOENT;
+	}
+
+	if (enable) {
+		ret = clk_prepare_enable(dclk);
+		if (ret < 0)
+			DRM_DEV_ERROR(hdmi->dev, "failed to enable dclk for video port%d - %d\n",
+				      vp_id, ret);
+	} else {
+		clk_disable_unprepare(dclk);
+	}
+
+	return 0;
+}
+
+static int dw_hdmi_dclk_set(void *data, bool enable)
+{
+	int vp_id = 0;
+	int ret = 0;
+
+	do {
+		ret = dw_hdmi_dclk_set_id(data, enable, vp_id);
+	} while (!ret && ++vp_id);
+
+	/* No device were found */
+	if (vp_id == 0)
+		return -ENOENT;
+
+	/* An error occured */
+	if (ret != -ENOENT)
+		return ret;
+
+	return 0;
+}
+
 static irqreturn_t dw_hdmi_qp_rk3588_hardirq(int irq, void *dev_id)
 {
 	struct rockchip_hdmi_qp *hdmi = dev_id;
@@ -331,6 +380,7 @@ static int dw_hdmi_qp_rockchip_bind(struct device *dev, struct device *master,
 
 	plat_data.phy_data = hdmi;
 	hdmi->dev = &pdev->dev;
+	plat_data.dclk_set = dw_hdmi_dclk_set;
 
 	encoder = &hdmi->encoder.encoder;
 	encoder->possible_crtcs = drm_of_find_possible_crtcs(drm, dev->of_node);
diff --git a/include/drm/bridge/dw_hdmi_qp.h b/include/drm/bridge/dw_hdmi_qp.h
index 58419b13a..7ca982c3c 100644
--- a/include/drm/bridge/dw_hdmi_qp.h
+++ b/include/drm/bridge/dw_hdmi_qp.h
@@ -26,6 +26,8 @@ struct dw_hdmi_qp_phy_ops {
 struct dw_hdmi_qp_plat_data {
 	const struct dw_hdmi_qp_phy_ops *phy_ops;
 	void *phy_data;
+
+	int (*dclk_set)(void *data, bool enable);
 };
 
 
-- 
2.46.0

