From 5d233a38ec5e111a5ed9c3e635fa2e994ce4c53e Mon Sep 17 00:00:00 2001
From: Derek Foreman <derek.foreman@collabora.com>
Date: Tue, 24 Sep 2024 05:53:29 -0500
Subject: [PATCH 76/94] [PATCH 18/18] WIP: Support subsampled YUV color formats

Add support for YUV422 and YUV420

Signed-off-by: Derek Foreman <derek.foreman@collabora.com>

Gbp-Pq: Topic hdmi
Gbp-Pq: Name 0018-WIP-Support-subsampled-YUV-color-formats.patch
---
 drivers/gpu/drm/bridge/synopsys/dw-hdmi-qp.c  |  3 +-
 .../gpu/drm/display/drm_hdmi_state_helper.c   |  9 +++--
 .../gpu/drm/rockchip/dw_hdmi_qp-rockchip.c    | 33 +++++++++++++++----
 drivers/gpu/drm/rockchip/rockchip_drm_drv.h   |  1 +
 4 files changed, 36 insertions(+), 10 deletions(-)

diff --git a/drivers/gpu/drm/bridge/synopsys/dw-hdmi-qp.c b/drivers/gpu/drm/bridge/synopsys/dw-hdmi-qp.c
index f55e25cfd..84706fed4 100644
--- a/drivers/gpu/drm/bridge/synopsys/dw-hdmi-qp.c
+++ b/drivers/gpu/drm/bridge/synopsys/dw-hdmi-qp.c
@@ -983,7 +983,8 @@ struct dw_hdmi_qp *dw_hdmi_qp_bind(struct platform_device *pdev,
 			   DRM_BRIDGE_OP_HPD;
 	hdmi->bridge.supported_formats = BIT(HDMI_COLORSPACE_RGB) |
 					 BIT(HDMI_COLORSPACE_YUV444) |
-					 BIT(HDMI_COLORSPACE_YUV422);
+					 BIT(HDMI_COLORSPACE_YUV422) |
+					 BIT(HDMI_COLORSPACE_YUV420);
 	hdmi->bridge.of_node = pdev->dev.of_node;
 	hdmi->bridge.type = DRM_MODE_CONNECTOR_HDMIA;
 	hdmi->bridge.vendor = "Synopsys";
diff --git a/drivers/gpu/drm/display/drm_hdmi_state_helper.c b/drivers/gpu/drm/display/drm_hdmi_state_helper.c
index f67bc8564..5ad1d8809 100644
--- a/drivers/gpu/drm/display/drm_hdmi_state_helper.c
+++ b/drivers/gpu/drm/display/drm_hdmi_state_helper.c
@@ -146,9 +146,12 @@ sink_supports_format_bpc(const struct drm_connector *connector,
 		return true;
 
 	case HDMI_COLORSPACE_YUV420:
-		/* TODO: YUV420 is unsupported at the moment. */
-		drm_dbg_kms(dev, "YUV420 format isn't supported yet.\n");
-		return false;
+		if (!(info->color_formats & DRM_COLOR_FORMAT_YCBCR420)) {
+			drm_dbg_kms(dev, "Sink doesn't support YUV420.\n");
+			return false;
+		}
+		/* TODO: need proper EDID checks! */
+		return true;
 
 	case HDMI_COLORSPACE_YUV422:
 		drm_dbg_kms(dev, "YUV422 format, checking the constraints.\n");
diff --git a/drivers/gpu/drm/rockchip/dw_hdmi_qp-rockchip.c b/drivers/gpu/drm/rockchip/dw_hdmi_qp-rockchip.c
index 73ffb9cc2..679cd9a46 100644
--- a/drivers/gpu/drm/rockchip/dw_hdmi_qp-rockchip.c
+++ b/drivers/gpu/drm/rockchip/dw_hdmi_qp-rockchip.c
@@ -35,6 +35,8 @@
 #define RK3588_SDAIN_MASK		BIT(10)
 #define RK3588_MODE_MASK		BIT(11)
 #define RK3588_I2S_SEL_MASK		BIT(13)
+#define RK3588_COLOR_DEPTH_MASK		GENMASK(7,4)
+#define RK3588_IPI_FORMAT_MASK		GENMASK(3,0)
 #define RK3588_GRF_VO1_CON9		0x0024
 #define RK3588_HDMI0_GRANT_SEL		BIT(10)
 
@@ -116,18 +118,28 @@ dw_hdmi_qp_rockchip_encoder_atomic_mode_set(struct drm_encoder *encoder,
 					    struct drm_crtc_state *crtc_state,
 					    struct drm_connector_state *conn_state)
 {
+	struct rockchip_crtc_state *s = to_rockchip_crtc_state(crtc_state);
 	struct rockchip_hdmi_qp *hdmi = to_rockchip_hdmi_qp(encoder);
 	struct drm_crtc *crtc = encoder->crtc;
 	int rate;
-	u32 val;
+	u32 val = 0;
 
 	clk_set_rate(hdmi->ref_clk, crtc_state->adjusted_mode.clock * 1000);
 	rate = crtc->state->mode.clock * 10;
-	if (conn_state->hdmi.output_bpc == 10) {
-		val = HIWORD_UPDATE((0x6 << 4), (0xf << 4));
+	if (conn_state->hdmi.output_bpc == 10 &&
+	    conn_state->hdmi.output_format != HDMI_COLORSPACE_YUV422) {
+		val |= HIWORD_UPDATE((0x6 << 4), RK3588_COLOR_DEPTH_MASK);
 		rate |= BIT(31);
 	} else
-		val = HIWORD_UPDATE(0, 0xf << 4);
+		val |= HIWORD_UPDATE(5 << 4, RK3588_COLOR_DEPTH_MASK);
+
+	switch (s->output_mode) {
+	case ROCKCHIP_OUT_MODE_YUV420:
+		val |= HIWORD_UPDATE(3, RK3588_IPI_FORMAT_MASK);
+		break;
+	default:
+		val |= HIWORD_UPDATE(0, RK3588_IPI_FORMAT_MASK);
+	}
 
 	/*
 	 * FIXME: Temporary workaround to pass pixel clock rate
@@ -161,9 +173,18 @@ dw_hdmi_qp_rockchip_encoder_atomic_check(struct drm_encoder *encoder,
 {
 	struct rockchip_crtc_state *s = to_rockchip_crtc_state(crtc_state);
 
-	s->output_mode = ROCKCHIP_OUT_MODE_AAAA;
-	s->output_type = DRM_MODE_CONNECTOR_HDMIA;
+	switch (conn_state->hdmi.output_format) {
+	case HDMI_COLORSPACE_YUV422:
+		s->output_mode = ROCKCHIP_OUT_MODE_YUV422;
+		break;
+	case HDMI_COLORSPACE_YUV420:
+		s->output_mode = ROCKCHIP_OUT_MODE_YUV420;
+		break;
+	default:
+		s->output_mode = ROCKCHIP_OUT_MODE_AAAA;
+	}
 
+	s->output_type = DRM_MODE_CONNECTOR_HDMIA;
 	return 0;
 }
 
diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_drv.h b/drivers/gpu/drm/rockchip/rockchip_drm_drv.h
index 24b4ce5ce..682a71336 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_drv.h
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_drv.h
@@ -28,6 +28,7 @@
 #define ROCKCHIP_OUT_MODE_BT1120	0
 #define ROCKCHIP_OUT_MODE_P666		1
 #define ROCKCHIP_OUT_MODE_P565		2
+#define ROCKCHIP_OUT_MODE_YUV422	3
 #define ROCKCHIP_OUT_MODE_BT656		5
 #define ROCKCHIP_OUT_MODE_S888		8
 #define ROCKCHIP_OUT_MODE_S888_DUMMY	12
-- 
2.46.0

