From a8b69a63c46aba45e78ceb84de691fcf8f9ea03d Mon Sep 17 00:00:00 2001
From: Derek Foreman <derek.foreman@collabora.com>
Date: Thu, 5 Sep 2024 09:25:13 -0500
Subject: [PATCH 67/94] [PATCH 09/18] WIP: Add a min_bpc hdmi property

Currently we can only set a maximum from userspace, but it's useful to be
able to set a minimum too. This allows a compositor to set a minimum, and
fall back to manual tone mapping if the expected range isn't available.

Signed-off-by: Derek Foreman <derek.foreman@collabora.com>

Gbp-Pq: Topic hdmi
Gbp-Pq: Name 0009-WIP-Add-a-min_bpc-hdmi-property.patch
---
 .../gpu/drm/display/drm_hdmi_state_helper.c   |  7 ++--
 drivers/gpu/drm/drm_atomic_uapi.c             |  4 +++
 drivers/gpu/drm/drm_connector.c               | 35 +++++++++++++++++++
 include/drm/drm_connector.h                   | 14 ++++++++
 4 files changed, 58 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/display/drm_hdmi_state_helper.c b/drivers/gpu/drm/display/drm_hdmi_state_helper.c
index d1a351977..f67bc8564 100644
--- a/drivers/gpu/drm/display/drm_hdmi_state_helper.c
+++ b/drivers/gpu/drm/display/drm_hdmi_state_helper.c
@@ -25,6 +25,7 @@ void __drm_atomic_helper_connector_hdmi_reset(struct drm_connector *connector,
 
 	new_conn_state->max_bpc = max_bpc;
 	new_conn_state->max_requested_bpc = max_bpc;
+	new_conn_state->min_requested_bpc = 8;
 	new_conn_state->requested_output_format = 0;
 	new_conn_state->hdmi.broadcast_rgb = DRM_HDMI_BROADCAST_RGB_AUTO;
 }
@@ -312,10 +313,12 @@ hdmi_compute_config(const struct drm_connector *connector,
 	unsigned int max_bpc = clamp_t(unsigned int,
 				       conn_state->max_bpc,
 				       8, connector->max_bpc);
+	unsigned int min_bpc = clamp_t(unsigned int,
+				       conn_state->min_requested_bpc,
+				       8, connector->max_bpc);
 	unsigned int bpc;
 	int ret;
-
-	for (bpc = max_bpc; bpc >= 8; bpc -= 2) {
+	for (bpc = max_bpc; bpc >= min_bpc; bpc -= 2) {
 		drm_dbg_kms(dev, "Trying with a %d bpc output\n", bpc);
 
 		ret = hdmi_compute_format(connector, conn_state, mode, bpc);
diff --git a/drivers/gpu/drm/drm_atomic_uapi.c b/drivers/gpu/drm/drm_atomic_uapi.c
index 2a9025762..1f57629cc 100644
--- a/drivers/gpu/drm/drm_atomic_uapi.c
+++ b/drivers/gpu/drm/drm_atomic_uapi.c
@@ -774,6 +774,8 @@ static int drm_atomic_connector_set_property(struct drm_connector *connector,
 						   fence_ptr);
 	} else if (property == connector->max_bpc_property) {
 		state->max_requested_bpc = val;
+	} else if (property == connector->min_bpc_property) {
+		state->min_requested_bpc = val;
 	} else if (property == connector->privacy_screen_sw_state_property) {
 		state->privacy_screen_sw_state = val;
 	} else if (property == connector->broadcast_rgb_property) {
@@ -861,6 +863,8 @@ drm_atomic_connector_get_property(struct drm_connector *connector,
 		*val = 0;
 	} else if (property == connector->max_bpc_property) {
 		*val = state->max_requested_bpc;
+	} else if (property == connector->min_bpc_property) {
+		*val = state->min_requested_bpc;
 	} else if (property == connector->privacy_screen_sw_state_property) {
 		*val = state->privacy_screen_sw_state;
 	} else if (property == connector->broadcast_rgb_property) {
diff --git a/drivers/gpu/drm/drm_connector.c b/drivers/gpu/drm/drm_connector.c
index 01ed46f39..894806483 100644
--- a/drivers/gpu/drm/drm_connector.c
+++ b/drivers/gpu/drm/drm_connector.c
@@ -524,6 +524,8 @@ int drmm_connector_hdmi_init(struct drm_device *dev,
 	drm_connector_attach_max_bpc_property(connector, 8, max_bpc);
 	connector->max_bpc = max_bpc;
 
+	drm_connector_attach_min_bpc_property(connector, 8, max_bpc);
+
 	drm_connector_attach_requested_output_format_property(connector, supported_formats);
 	if (max_bpc > 8)
 		drm_connector_attach_hdr_output_metadata_property(connector);
@@ -2626,6 +2628,39 @@ int drm_connector_attach_max_bpc_property(struct drm_connector *connector,
 }
 EXPORT_SYMBOL(drm_connector_attach_max_bpc_property);
 
+/**
+ * drm_connector_attach_min_bpc_property - attach "min bpc" property
+ * @connector: connector to attach min bpc property on.
+ * @min: The minimum bit depth supported by the connector.
+ * @max: The maximum bit depth supported by the connector.
+ *
+ * This is used to add support for limiting the bit depth on a connector.
+ *
+ * Returns:
+ * Zero on success, negative errno on failure.
+ */
+int drm_connector_attach_min_bpc_property(struct drm_connector *connector,
+					  int min, int max)
+{
+	struct drm_device *dev = connector->dev;
+	struct drm_property *prop;
+
+	prop = connector->min_bpc_property;
+	if (!prop) {
+		prop = drm_property_create_range(dev, 0, "min bpc", min, max);
+		if (!prop)
+			return -ENOMEM;
+
+		connector->min_bpc_property = prop;
+	}
+
+	drm_object_attach_property(&connector->base, prop, min);
+	connector->state->min_requested_bpc = min;
+
+	return 0;
+}
+EXPORT_SYMBOL(drm_connector_attach_min_bpc_property);
+
 int drm_connector_attach_requested_output_format_property(struct drm_connector *connector,
 							  unsigned long supported_formats)
 {
diff --git a/include/drm/drm_connector.h b/include/drm/drm_connector.h
index a67510f64..a53139a1b 100644
--- a/include/drm/drm_connector.h
+++ b/include/drm/drm_connector.h
@@ -1130,6 +1130,12 @@ struct drm_connector_state {
 	 */
 	u8 max_bpc;
 
+	/**
+	 * @min_requested_bpc: Connector property to limit the minimum bit
+	 * depth of the pixels.
+	 */
+	u8 min_requested_bpc;
+
 	/**
 	 * @privacy_screen_sw_state: See :ref:`Standard Connector
 	 * Properties<standard_connector_properties>`
@@ -1912,6 +1918,12 @@ struct drm_connector {
 	 */
 	struct drm_property *max_bpc_property;
 
+	/**
+	 * @min_bpc_property: Default connector property for the min bpc to be
+	 * driven out of the connector.
+	 */
+	struct drm_property *min_bpc_property;
+
 	/** @privacy_screen: drm_privacy_screen for this connector, or NULL. */
 	struct drm_privacy_screen *privacy_screen;
 
@@ -2301,6 +2313,8 @@ int drm_connector_set_orientation_from_panel(
 	struct drm_panel *panel);
 int drm_connector_attach_max_bpc_property(struct drm_connector *connector,
 					  int min, int max);
+int drm_connector_attach_min_bpc_property(struct drm_connector *connector,
+					  int min, int max);
 int drm_connector_attach_requested_output_format_property(struct drm_connector *connector,
 							  unsigned long supported_formats);
 void drm_connector_create_privacy_screen_properties(struct drm_connector *conn);
-- 
2.46.0

