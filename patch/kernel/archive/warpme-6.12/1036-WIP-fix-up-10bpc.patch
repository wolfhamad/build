From 636cf7886280aed876d07d4a8028e117f3823e92 Mon Sep 17 00:00:00 2001
From: Derek Foreman <derek.foreman@collabora.com>
Date: Tue, 17 Sep 2024 14:19:38 -0500
Subject: [PATCH 71/94] [PATCH 13/18] WIP: fix up 10bpc

Gbp-Pq: Topic hdmi
Gbp-Pq: Name 0013-WIP-fix-up-10bpc.patch
---
 .../gpu/drm/rockchip/dw_hdmi_qp-rockchip.c    | 50 +++++++++++--------
 1 file changed, 28 insertions(+), 22 deletions(-)

diff --git a/drivers/gpu/drm/rockchip/dw_hdmi_qp-rockchip.c b/drivers/gpu/drm/rockchip/dw_hdmi_qp-rockchip.c
index 353c9e3d5..73ffb9cc2 100644
--- a/drivers/gpu/drm/rockchip/dw_hdmi_qp-rockchip.c
+++ b/drivers/gpu/drm/rockchip/dw_hdmi_qp-rockchip.c
@@ -112,40 +112,46 @@ static int dw_hdmi_qp_rockchip_parse_dt(struct rockchip_hdmi_qp *hdmi)
 }
 
 static void
-dw_hdmi_qp_rockchip_encoder_mode_set(struct drm_encoder *encoder,
-				     struct drm_display_mode *mode,
-				     struct drm_display_mode *adj_mode)
+dw_hdmi_qp_rockchip_encoder_atomic_mode_set(struct drm_encoder *encoder,
+					    struct drm_crtc_state *crtc_state,
+					    struct drm_connector_state *conn_state)
 {
 	struct rockchip_hdmi_qp *hdmi = to_rockchip_hdmi_qp(encoder);
+	struct drm_crtc *crtc = encoder->crtc;
+	int rate;
+	u32 val;
 
-	clk_set_rate(hdmi->ref_clk, adj_mode->clock * 1000);
+	clk_set_rate(hdmi->ref_clk, crtc_state->adjusted_mode.clock * 1000);
+	rate = crtc->state->mode.clock * 10;
+	if (conn_state->hdmi.output_bpc == 10) {
+		val = HIWORD_UPDATE((0x6 << 4), (0xf << 4));
+		rate |= BIT(31);
+	} else
+		val = HIWORD_UPDATE(0, 0xf << 4);
+
+	/*
+	 * FIXME: Temporary workaround to pass pixel clock rate
+	 * to the PHY driver until phy_configure_opts_hdmi
+	 * becomes available in the PHY API. See also the related
+	 * comment in rk_hdptx_phy_power_on() from
+	 * drivers/phy/rockchip/phy-rockchip-samsung-hdptx.c
+	 */
+	phy_set_bus_width(hdmi->phy, rate);
+
+	regmap_write(hdmi->vo1_regmap, RK3588_GRF_VO1_CON3, val);
 }
 
 static void dw_hdmi_qp_rockchip_encoder_enable(struct drm_encoder *encoder)
 {
 	struct rockchip_hdmi_qp *hdmi = to_rockchip_hdmi_qp(encoder);
 	struct drm_crtc *crtc = encoder->crtc;
-	int rate;
 
 	/* Unconditionally switch to TMDS as FRL is not yet supported */
 	gpiod_set_value(hdmi->enable_gpio, 1);
 
-	if (crtc && crtc->state) {
+	if (crtc && crtc->state)
 		clk_set_rate(hdmi->ref_clk,
 			     crtc->state->adjusted_mode.crtc_clock * 1000);
-		/*
-		 * FIXME: Temporary workaround to pass pixel clock rate
-		 * to the PHY driver until phy_configure_opts_hdmi
-		 * becomes available in the PHY API. See also the related
-		 * comment in rk_hdptx_phy_power_on() from
-		 * drivers/phy/rockchip/phy-rockchip-samsung-hdptx.c
-		 */
-		if (hdmi->phy) {
-			rate = crtc->state->mode.clock * 10;
-			phy_set_bus_width(hdmi->phy, rate);
-			drm_dbg(hdmi, "%s set bus_width=%u\n", __func__, rate);
-		}
-	}
 }
 
 static int
@@ -163,9 +169,9 @@ dw_hdmi_qp_rockchip_encoder_atomic_check(struct drm_encoder *encoder,
 
 static const struct
 drm_encoder_helper_funcs dw_hdmi_qp_rockchip_encoder_helper_funcs = {
-	.mode_set	= dw_hdmi_qp_rockchip_encoder_mode_set,
-	.enable		= dw_hdmi_qp_rockchip_encoder_enable,
-	.atomic_check	= dw_hdmi_qp_rockchip_encoder_atomic_check,
+	.atomic_mode_set	= dw_hdmi_qp_rockchip_encoder_atomic_mode_set,
+	.enable			= dw_hdmi_qp_rockchip_encoder_enable,
+	.atomic_check		= dw_hdmi_qp_rockchip_encoder_atomic_check,
 };
 
 static int dw_hdmi_qp_rk3588_phy_init(struct dw_hdmi_qp *dw_hdmi, void *data,
-- 
2.46.0

