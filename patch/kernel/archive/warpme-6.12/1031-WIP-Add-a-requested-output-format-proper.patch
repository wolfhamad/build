From 9674dd348bf38788b1b3d411e14e6282b81967a4 Mon Sep 17 00:00:00 2001
From: Derek Foreman <derek.foreman@collabora.com>
Date: Wed, 4 Sep 2024 12:57:09 -0500
Subject: [PATCH 66/94] [PATCH 08/18] WIP: Add a requested output format
 property

Allow setting HDMI output format independently of the plane formats.

Needs to be split into infra/impl

Needs an atomic check for the rockchip impl.

Signed-off-by: Derek Foreman <derek.foreman@collabora.com>

Gbp-Pq: Topic hdmi
Gbp-Pq: Name 0008-WIP-Add-a-requested-output-format-property.patch
---
 .../gpu/drm/display/drm_hdmi_state_helper.c   |  8 ++-
 drivers/gpu/drm/drm_atomic_uapi.c             |  4 ++
 drivers/gpu/drm/drm_connector.c               | 37 +++++++++++++
 drivers/gpu/drm/rockchip/rockchip_drm_vop2.c  | 54 +++++++++++++++++++
 drivers/gpu/drm/rockchip/rockchip_drm_vop2.h  |  2 +
 include/drm/drm_connector.h                   |  6 +++
 6 files changed, 109 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/display/drm_hdmi_state_helper.c b/drivers/gpu/drm/display/drm_hdmi_state_helper.c
index feb7a3a75..d1a351977 100644
--- a/drivers/gpu/drm/display/drm_hdmi_state_helper.c
+++ b/drivers/gpu/drm/display/drm_hdmi_state_helper.c
@@ -25,6 +25,7 @@ void __drm_atomic_helper_connector_hdmi_reset(struct drm_connector *connector,
 
 	new_conn_state->max_bpc = max_bpc;
 	new_conn_state->max_requested_bpc = max_bpc;
+	new_conn_state->requested_output_format = 0;
 	new_conn_state->hdmi.broadcast_rgb = DRM_HDMI_BROADCAST_RGB_AUTO;
 }
 EXPORT_SYMBOL(__drm_atomic_helper_connector_hdmi_reset);
@@ -284,13 +285,16 @@ hdmi_compute_format(const struct drm_connector *connector,
 		    unsigned int bpc)
 {
 	struct drm_device *dev = connector->dev;
+	u32 format = HDMI_COLORSPACE_RGB;
 
+	if (conn_state->requested_output_format)
+		format = conn_state->requested_output_format - 1;
 	/*
 	 * TODO: Add support for YCbCr420 output for HDMI 2.0 capable
 	 * devices, for modes that only support YCbCr420.
 	 */
-	if (hdmi_try_format_bpc(connector, conn_state, mode, bpc, HDMI_COLORSPACE_RGB)) {
-		conn_state->hdmi.output_format = HDMI_COLORSPACE_RGB;
+	if (hdmi_try_format_bpc(connector, conn_state, mode, bpc, format)) {
+		conn_state->hdmi.output_format = format;
 		return 0;
 	}
 
diff --git a/drivers/gpu/drm/drm_atomic_uapi.c b/drivers/gpu/drm/drm_atomic_uapi.c
index 7936c2023..2a9025762 100644
--- a/drivers/gpu/drm/drm_atomic_uapi.c
+++ b/drivers/gpu/drm/drm_atomic_uapi.c
@@ -778,6 +778,8 @@ static int drm_atomic_connector_set_property(struct drm_connector *connector,
 		state->privacy_screen_sw_state = val;
 	} else if (property == connector->broadcast_rgb_property) {
 		state->hdmi.broadcast_rgb = val;
+	} else if (property == connector->requested_output_format_property) {
+		state->requested_output_format = val;
 	} else if (connector->funcs->atomic_set_property) {
 		return connector->funcs->atomic_set_property(connector,
 				state, property, val);
@@ -863,6 +865,8 @@ drm_atomic_connector_get_property(struct drm_connector *connector,
 		*val = state->privacy_screen_sw_state;
 	} else if (property == connector->broadcast_rgb_property) {
 		*val = state->hdmi.broadcast_rgb;
+	} else if (property == connector->requested_output_format_property) {
+		*val = state->requested_output_format;
 	} else if (connector->funcs->atomic_get_property) {
 		return connector->funcs->atomic_get_property(connector,
 				state, property, val);
diff --git a/drivers/gpu/drm/drm_connector.c b/drivers/gpu/drm/drm_connector.c
index ab6ab7ff7..01ed46f39 100644
--- a/drivers/gpu/drm/drm_connector.c
+++ b/drivers/gpu/drm/drm_connector.c
@@ -524,6 +524,7 @@ int drmm_connector_hdmi_init(struct drm_device *dev,
 	drm_connector_attach_max_bpc_property(connector, 8, max_bpc);
 	connector->max_bpc = max_bpc;
 
+	drm_connector_attach_requested_output_format_property(connector, supported_formats);
 	if (max_bpc > 8)
 		drm_connector_attach_hdr_output_metadata_property(connector);
 
@@ -2625,6 +2626,42 @@ int drm_connector_attach_max_bpc_property(struct drm_connector *connector,
 }
 EXPORT_SYMBOL(drm_connector_attach_max_bpc_property);
 
+int drm_connector_attach_requested_output_format_property(struct drm_connector *connector,
+							  unsigned long supported_formats)
+{
+	struct drm_device *dev = connector->dev;
+	struct drm_property *prop;
+
+	struct drm_prop_enum_list requested_output_format_list[HDMI_COLORSPACE_IDO_DEFINED + 2];
+	unsigned int i, len = 1;
+
+	requested_output_format_list[0].type = 0;
+	requested_output_format_list[0].name = "default";
+	for (i = 0; i < HDMI_COLORSPACE_IDO_DEFINED + 1; i++) {
+		if (!(supported_formats & BIT(i)))
+			continue;
+		requested_output_format_list[len].type = i + 1;
+		requested_output_format_list[len].name = drm_hdmi_connector_get_output_format_name(i);
+		len++;
+	}
+
+	prop = connector->requested_output_format_property;
+	if (!prop) {
+		prop = drm_property_create_enum(dev, DRM_MODE_PROP_ENUM,
+						"output format",
+						requested_output_format_list, len);
+		if (!prop)
+			return -ENOMEM;
+
+		connector->requested_output_format_property = prop;
+	}
+	drm_object_attach_property(&connector->base, prop, 1);
+	connector->state->requested_output_format = 0;
+
+	return 0;
+}
+EXPORT_SYMBOL(drm_connector_attach_requested_output_format_property);
+
 /**
  * drm_connector_attach_hdr_output_metadata_property - attach "HDR_OUTPUT_METADA" property
  * @connector: connector to attach the property on.
diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_vop2.c b/drivers/gpu/drm/rockchip/rockchip_drm_vop2.c
index 0440f1dcd..4b97c3f7d 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_vop2.c
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_vop2.c
@@ -1553,6 +1553,58 @@ static void vop2_dither_setup(struct drm_crtc *crtc, u32 *dsp_ctrl)
 				DITHER_DOWN_ALLEGRO);
 }
 
+static bool is_format_yuv(enum hdmi_colorspace format)
+{
+	switch (format) {
+	case HDMI_COLORSPACE_RGB:
+		return false;
+	default:
+		return true;
+	}
+}
+
+static void vop2_bcsh_config(struct drm_crtc *crtc, struct vop2_video_port *vp)
+{
+	struct drm_connector_list_iter conn_iter;
+	struct drm_connector *connector;
+	u32 format = 0;
+	enum drm_colorspace colorspace = 0;
+	u32 val = 0;
+	bool yuv_out;
+
+	drm_connector_list_iter_begin(crtc->dev, &conn_iter);
+	drm_for_each_connector_iter(connector, &conn_iter) {
+		if (!(crtc->state->connector_mask & drm_connector_mask(connector)))
+			continue;
+
+		format = connector->state->hdmi.output_format;
+		colorspace = connector->state->colorspace;
+		break;
+        }
+	drm_connector_list_iter_end(&conn_iter);
+
+	yuv_out = is_format_yuv(format);
+	if (yuv_out) {
+		val = RK3568_VP_BCSH_CTRL__BCSH_R2Y_EN | BIT(7);
+		switch (colorspace) {
+		case DRM_MODE_COLORIMETRY_BT2020_RGB:
+		case DRM_MODE_COLORIMETRY_BT2020_YCC:
+			val |= BIT(7) | BIT(6);
+			break;
+		case DRM_MODE_COLORIMETRY_BT709_YCC:
+			val |= BIT(6);
+			break;
+		default:
+			break;
+		}
+		if (colorspace == DRM_MODE_COLORIMETRY_BT2020_RGB ||
+		    colorspace == DRM_MODE_COLORIMETRY_BT2020_YCC)
+			val |= BIT(6);
+	}
+	vop2_vp_write(vp, RK3568_VP_BCSH_CTRL, val);
+	vop2_vp_write(vp, RK3568_VP_BCSH_COLOR_BAR, 0);
+}
+
 static void vop2_post_config(struct drm_crtc *crtc)
 {
 	struct vop2_video_port *vp = to_vop2_video_port(crtc);
@@ -1611,6 +1663,8 @@ static void vop2_post_config(struct drm_crtc *crtc)
 	}
 
 	vop2_vp_write(vp, RK3568_VP_DSP_BG, 0);
+
+	vop2_bcsh_config(crtc, vp);
 }
 
 static unsigned long rk3568_set_intf_mux(struct vop2_video_port *vp, int id, u32 polflags)
diff --git a/drivers/gpu/drm/rockchip/rockchip_drm_vop2.h b/drivers/gpu/drm/rockchip/rockchip_drm_vop2.h
index 576db66e6..e1e46c624 100644
--- a/drivers/gpu/drm/rockchip/rockchip_drm_vop2.h
+++ b/drivers/gpu/drm/rockchip/rockchip_drm_vop2.h
@@ -397,6 +397,8 @@ enum dst_factor_mode {
 
 #define RK3568_REG_CFG_DONE__GLB_CFG_DONE_EN		BIT(15)
 
+#define RK3568_VP_BCSH_CTRL__BCSH_R2Y_EN		BIT(4)
+
 #define RK3568_VP_DSP_CTRL__STANDBY			BIT(31)
 #define RK3568_VP_DSP_CTRL__DITHER_DOWN_MODE		BIT(20)
 #define RK3568_VP_DSP_CTRL__DITHER_DOWN_SEL		GENMASK(19, 18)
diff --git a/include/drm/drm_connector.h b/include/drm/drm_connector.h
index c75465104..a67510f64 100644
--- a/include/drm/drm_connector.h
+++ b/include/drm/drm_connector.h
@@ -1147,6 +1147,8 @@ struct drm_connector_state {
 	 * @drm_atomic_helper_connector_hdmi_check().
 	 */
 	struct drm_connector_hdmi_state hdmi;
+
+	unsigned long requested_output_format;
 };
 
 /**
@@ -2126,6 +2128,8 @@ struct drm_connector {
 	 * @hdmi: HDMI-related variable and properties.
 	 */
 	struct drm_connector_hdmi hdmi;
+
+	struct drm_property *requested_output_format_property;
 };
 
 #define obj_to_connector(x) container_of(x, struct drm_connector, base)
@@ -2297,6 +2301,8 @@ int drm_connector_set_orientation_from_panel(
 	struct drm_panel *panel);
 int drm_connector_attach_max_bpc_property(struct drm_connector *connector,
 					  int min, int max);
+int drm_connector_attach_requested_output_format_property(struct drm_connector *connector,
+							  unsigned long supported_formats);
 void drm_connector_create_privacy_screen_properties(struct drm_connector *conn);
 void drm_connector_attach_privacy_screen_properties(struct drm_connector *conn);
 void drm_connector_attach_privacy_screen_provider(
-- 
2.46.0

